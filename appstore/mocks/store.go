// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pooky-labs/go-iap/appstore/api (interfaces: StoreAPIClient)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/store.go -package=mocks github.com/pooky-labs/go-iap/appstore/api StoreAPIClient
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	url "net/url"
	reflect "reflect"
	time "time"

	api "github.com/pooky-labs/go-iap/appstore/api"
	gomock "go.uber.org/mock/gomock"
)

// MockStoreAPIClient is a mock of StoreAPIClient interface.
type MockStoreAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockStoreAPIClientMockRecorder
}

// MockStoreAPIClientMockRecorder is the mock recorder for MockStoreAPIClient.
type MockStoreAPIClientMockRecorder struct {
	mock *MockStoreAPIClient
}

// NewMockStoreAPIClient creates a new mock instance.
func NewMockStoreAPIClient(ctrl *gomock.Controller) *MockStoreAPIClient {
	mock := &MockStoreAPIClient{ctrl: ctrl}
	mock.recorder = &MockStoreAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreAPIClient) EXPECT() *MockStoreAPIClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockStoreAPIClient) Do(arg0 context.Context, arg1, arg2 string, arg3 io.Reader) (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Do indicates an expected call of Do.
func (mr *MockStoreAPIClientMockRecorder) Do(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockStoreAPIClient)(nil).Do), arg0, arg1, arg2, arg3)
}

// ExtendSubscriptionRenewalDate mocks base method.
func (m *MockStoreAPIClient) ExtendSubscriptionRenewalDate(arg0 context.Context, arg1 string, arg2 api.ExtendRenewalDateRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendSubscriptionRenewalDate", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendSubscriptionRenewalDate indicates an expected call of ExtendSubscriptionRenewalDate.
func (mr *MockStoreAPIClientMockRecorder) ExtendSubscriptionRenewalDate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendSubscriptionRenewalDate", reflect.TypeOf((*MockStoreAPIClient)(nil).ExtendSubscriptionRenewalDate), arg0, arg1, arg2)
}

// ExtendSubscriptionRenewalDateForAll mocks base method.
func (m *MockStoreAPIClient) ExtendSubscriptionRenewalDateForAll(arg0 context.Context, arg1 api.MassExtendRenewalDateRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendSubscriptionRenewalDateForAll", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendSubscriptionRenewalDateForAll indicates an expected call of ExtendSubscriptionRenewalDateForAll.
func (mr *MockStoreAPIClientMockRecorder) ExtendSubscriptionRenewalDateForAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendSubscriptionRenewalDateForAll", reflect.TypeOf((*MockStoreAPIClient)(nil).ExtendSubscriptionRenewalDateForAll), arg0, arg1)
}

// GetALLSubscriptionStatuses mocks base method.
func (m *MockStoreAPIClient) GetALLSubscriptionStatuses(arg0 context.Context, arg1 string, arg2 *url.Values) (*api.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetALLSubscriptionStatuses", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetALLSubscriptionStatuses indicates an expected call of GetALLSubscriptionStatuses.
func (mr *MockStoreAPIClientMockRecorder) GetALLSubscriptionStatuses(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetALLSubscriptionStatuses", reflect.TypeOf((*MockStoreAPIClient)(nil).GetALLSubscriptionStatuses), arg0, arg1, arg2)
}

// GetAllNotificationHistory mocks base method.
func (m *MockStoreAPIClient) GetAllNotificationHistory(arg0 context.Context, arg1 api.NotificationHistoryRequest, arg2 time.Duration) ([]api.NotificationHistoryResponseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotificationHistory", arg0, arg1, arg2)
	ret0, _ := ret[0].([]api.NotificationHistoryResponseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotificationHistory indicates an expected call of GetAllNotificationHistory.
func (mr *MockStoreAPIClientMockRecorder) GetAllNotificationHistory(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotificationHistory", reflect.TypeOf((*MockStoreAPIClient)(nil).GetAllNotificationHistory), arg0, arg1, arg2)
}

// GetNotificationHistory mocks base method.
func (m *MockStoreAPIClient) GetNotificationHistory(arg0 context.Context, arg1 api.NotificationHistoryRequest, arg2 string) (*api.NotificationHistoryResponses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationHistory", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.NotificationHistoryResponses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationHistory indicates an expected call of GetNotificationHistory.
func (mr *MockStoreAPIClientMockRecorder) GetNotificationHistory(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationHistory", reflect.TypeOf((*MockStoreAPIClient)(nil).GetNotificationHistory), arg0, arg1, arg2)
}

// GetRefundHistory mocks base method.
func (m *MockStoreAPIClient) GetRefundHistory(arg0 context.Context, arg1 string) ([]*api.RefundLookupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefundHistory", arg0, arg1)
	ret0, _ := ret[0].([]*api.RefundLookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefundHistory indicates an expected call of GetRefundHistory.
func (mr *MockStoreAPIClientMockRecorder) GetRefundHistory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefundHistory", reflect.TypeOf((*MockStoreAPIClient)(nil).GetRefundHistory), arg0, arg1)
}

// GetSubscriptionRenewalDataStatus mocks base method.
func (m *MockStoreAPIClient) GetSubscriptionRenewalDataStatus(arg0 context.Context, arg1, arg2 string) (int, *api.MassExtendRenewalDateStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionRenewalDataStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*api.MassExtendRenewalDateStatusResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSubscriptionRenewalDataStatus indicates an expected call of GetSubscriptionRenewalDataStatus.
func (mr *MockStoreAPIClientMockRecorder) GetSubscriptionRenewalDataStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionRenewalDataStatus", reflect.TypeOf((*MockStoreAPIClient)(nil).GetSubscriptionRenewalDataStatus), arg0, arg1, arg2)
}

// GetTestNotificationStatus mocks base method.
func (m *MockStoreAPIClient) GetTestNotificationStatus(arg0 context.Context, arg1 string) (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestNotificationStatus", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTestNotificationStatus indicates an expected call of GetTestNotificationStatus.
func (mr *MockStoreAPIClientMockRecorder) GetTestNotificationStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestNotificationStatus", reflect.TypeOf((*MockStoreAPIClient)(nil).GetTestNotificationStatus), arg0, arg1)
}

// GetTransactionHistory mocks base method.
func (m *MockStoreAPIClient) GetTransactionHistory(arg0 context.Context, arg1 string, arg2 *url.Values) ([]*api.HistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionHistory", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*api.HistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionHistory indicates an expected call of GetTransactionHistory.
func (mr *MockStoreAPIClientMockRecorder) GetTransactionHistory(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionHistory", reflect.TypeOf((*MockStoreAPIClient)(nil).GetTransactionHistory), arg0, arg1, arg2)
}

// GetTransactionInfo mocks base method.
func (m *MockStoreAPIClient) GetTransactionInfo(arg0 context.Context, arg1 string) (*api.TransactionInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionInfo", arg0, arg1)
	ret0, _ := ret[0].(*api.TransactionInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionInfo indicates an expected call of GetTransactionInfo.
func (mr *MockStoreAPIClientMockRecorder) GetTransactionInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionInfo", reflect.TypeOf((*MockStoreAPIClient)(nil).GetTransactionInfo), arg0, arg1)
}

// LookupOrderID mocks base method.
func (m *MockStoreAPIClient) LookupOrderID(arg0 context.Context, arg1 string) (*api.OrderLookupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupOrderID", arg0, arg1)
	ret0, _ := ret[0].(*api.OrderLookupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupOrderID indicates an expected call of LookupOrderID.
func (mr *MockStoreAPIClientMockRecorder) LookupOrderID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupOrderID", reflect.TypeOf((*MockStoreAPIClient)(nil).LookupOrderID), arg0, arg1)
}

// ParseJWSEncodeString mocks base method.
func (m *MockStoreAPIClient) ParseJWSEncodeString(arg0 string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWSEncodeString", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWSEncodeString indicates an expected call of ParseJWSEncodeString.
func (mr *MockStoreAPIClientMockRecorder) ParseJWSEncodeString(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWSEncodeString", reflect.TypeOf((*MockStoreAPIClient)(nil).ParseJWSEncodeString), arg0)
}

// ParseSignedTransaction mocks base method.
func (m *MockStoreAPIClient) ParseSignedTransaction(arg0 string) (*api.JWSTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSignedTransaction", arg0)
	ret0, _ := ret[0].(*api.JWSTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSignedTransaction indicates an expected call of ParseSignedTransaction.
func (mr *MockStoreAPIClientMockRecorder) ParseSignedTransaction(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSignedTransaction", reflect.TypeOf((*MockStoreAPIClient)(nil).ParseSignedTransaction), arg0)
}

// ParseSignedTransactions mocks base method.
func (m *MockStoreAPIClient) ParseSignedTransactions(arg0 []string) ([]*api.JWSTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSignedTransactions", arg0)
	ret0, _ := ret[0].([]*api.JWSTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSignedTransactions indicates an expected call of ParseSignedTransactions.
func (mr *MockStoreAPIClientMockRecorder) ParseSignedTransactions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSignedTransactions", reflect.TypeOf((*MockStoreAPIClient)(nil).ParseSignedTransactions), arg0)
}

// SendConsumptionInfo mocks base method.
func (m *MockStoreAPIClient) SendConsumptionInfo(arg0 context.Context, arg1 string, arg2 api.ConsumptionRequestBody) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConsumptionInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendConsumptionInfo indicates an expected call of SendConsumptionInfo.
func (mr *MockStoreAPIClientMockRecorder) SendConsumptionInfo(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConsumptionInfo", reflect.TypeOf((*MockStoreAPIClient)(nil).SendConsumptionInfo), arg0, arg1, arg2)
}

// SendRequestTestNotification mocks base method.
func (m *MockStoreAPIClient) SendRequestTestNotification(arg0 context.Context) (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequestTestNotification", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendRequestTestNotification indicates an expected call of SendRequestTestNotification.
func (mr *MockStoreAPIClientMockRecorder) SendRequestTestNotification(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequestTestNotification", reflect.TypeOf((*MockStoreAPIClient)(nil).SendRequestTestNotification), arg0)
}
